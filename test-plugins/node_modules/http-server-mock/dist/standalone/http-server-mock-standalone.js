"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var express = require("express");
var destroyable_server_1 = require("../util/destroyable-server");
var bodyParser = require("body-parser");
var apollo_server_express_1 = require("apollo-server-express");
var graphql_tools_1 = require("graphql-tools");
var http_server_mock_server_1 = require("../server/http-server-mock-server");
var standalone_model_1 = require("./standalone-model");
var _ = require("lodash");
exports.DEFAULT_PORT = 45456;
var HttpServerMockStandalone = /** @class */ (function () {
    function HttpServerMockStandalone() {
        var _this = this;
        this.app = express();
        this.server = null;
        this.mockServers = [];
        this.routers = {};
        this.app.post('/start', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            var port, _a, mockPort, mockServer, config, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        port = req.query.port;
                        if (port != null && this.routers[port] != null) {
                            res.status(409).json({
                                error: "Cannot start: mock server is already running on port " + port
                            });
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.startMockServer(port)];
                    case 1:
                        _a = _b.sent(), mockPort = _a.mockPort, mockServer = _a.mockServer;
                        config = {
                            port: mockPort,
                            mockRoot: mockServer.urlFor('')
                        };
                        res.json(config);
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _b.sent();
                        res.status(500).json({ error: "Failed to start server: " + (e_1.message || e_1) });
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        // Dynamically route to admin servers ourselves, so we can easily add/remove
        // servers as we see fit later on.
        this.app.use('/server/:port/', function (req, res, next) {
            _this.routers[req.params.port](req, res, next);
        });
    }
    HttpServerMockStandalone.prototype.loadSchema = function (schemaFilename, mockServer) {
        return new Promise(function (resolve, reject) {
            fs.readFile(path.join(__dirname, schemaFilename), 'utf8', function (err, schemaString) {
                if (err)
                    reject(err);
                else
                    resolve(schemaString);
            });
        }).then(function (schemaString) { return graphql_tools_1.makeExecutableSchema({
            typeDefs: schemaString,
            resolvers: standalone_model_1.buildStandaloneModel(mockServer)
        }); });
    };
    HttpServerMockStandalone.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.server)
                            throw new Error('Standalone server already running');
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                _this.server = destroyable_server_1.default(_this.app.listen(exports.DEFAULT_PORT, resolve));
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    HttpServerMockStandalone.prototype.startMockServer = function (port) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var mockServer, mockPort, mockServerRouter, _a, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        mockServer = new http_server_mock_server_1.default();
                        this.mockServers.push(mockServer);
                        return [4 /*yield*/, mockServer.start(port)];
                    case 1:
                        _f.sent();
                        mockPort = mockServer.port;
                        mockServerRouter = express.Router();
                        this.routers[mockPort] = mockServerRouter;
                        mockServerRouter.post('/stop', function (req, res) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, mockServer.stop()];
                                    case 1:
                                        _a.sent();
                                        this.mockServers = _.reject(this.mockServers, mockServer);
                                        delete this.routers[mockPort];
                                        res.status(200).send(JSON.stringify({
                                            success: true
                                        }));
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        _b = (_a = mockServerRouter).use;
                        _c = [bodyParser.json()];
                        _d = apollo_server_express_1.graphqlExpress;
                        _e = {};
                        return [4 /*yield*/, this.loadSchema('schema.gql', mockServer)];
                    case 2:
                        _b.apply(_a, _c.concat([_d.apply(void 0, [(_e.schema = _f.sent(),
                                    _e)])]));
                        return [2 /*return*/, {
                                mockPort: mockPort,
                                mockServer: mockServer
                            }];
                }
            });
        });
    };
    HttpServerMockStandalone.prototype.stop = function () {
        var _this = this;
        if (!this.server)
            return;
        return Promise.all([
            this.server.destroy(),
        ].concat(this.mockServers.map(function (s) { return s.stop(); }))).then(function () {
            _this.server = null;
        });
    };
    return HttpServerMockStandalone;
}());
exports.HttpServerMockStandalone = HttpServerMockStandalone;
