"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var graphql_1 = require("graphql");
function astToObject(ast) {
    return _.zipObject(ast.fields.map(function (f) { return f.name.value; }), ast.fields.map(function (f) { return f.value; }));
}
function parseAnyAst(ast) {
    switch (ast.kind) {
        case graphql_1.Kind.OBJECT:
            return astToObject(ast);
        case graphql_1.Kind.LIST:
            return ast.values.map(parseAnyAst);
        case graphql_1.Kind.BOOLEAN:
        case graphql_1.Kind.ENUM:
        case graphql_1.Kind.FLOAT:
        case graphql_1.Kind.INT:
        case graphql_1.Kind.STRING:
            return ast.value;
        case graphql_1.Kind.NULL:
            return null;
        case graphql_1.Kind.VARIABLE:
            throw new Error("No idea what parsing a 'variable' means");
    }
}
function buildMockedEndpointData(endpoint) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = {
                        id: endpoint.id
                    };
                    return [4 /*yield*/, endpoint.getSeenRequests()];
                case 1: return [2 /*return*/, (_a.seenRequests = (_b.sent()),
                        _a)];
            }
        });
    });
}
var ScalarResolvers = {
    RequestMatcher: new graphql_1.GraphQLScalarType({
        name: 'RequestMatcher',
        description: 'Matcher for requests',
        serialize: function (value) {
            throw new Error('Matchers are input only values');
        },
        parseValue: function (v) { return v; },
        parseLiteral: function (ast) {
            if (ast.kind === graphql_1.Kind.OBJECT) {
                return astToObject(ast);
            }
            else
                return null;
        }
    }),
    RequestHandler: new graphql_1.GraphQLScalarType({
        name: 'RequestHandler',
        description: 'Handler for requests',
        serialize: function (value) {
            throw new Error('Handlers are input only values');
        },
        parseValue: function (v) { return v; },
        parseLiteral: function (ast) {
            if (ast.kind === graphql_1.Kind.OBJECT) {
                return astToObject(ast);
            }
            else
                return null;
        }
    }),
    RuleCompletionChecker: new graphql_1.GraphQLScalarType({
        name: 'RuleCompletionChecker',
        description: 'Completion checkers for requests',
        serialize: function (value) {
            throw new Error('Completion checkers are input only values');
        },
        parseValue: function (v) { return v; },
        parseLiteral: function (ast) {
            if (ast.kind === graphql_1.Kind.OBJECT) {
                return astToObject(ast);
            }
            else
                return null;
        }
    }),
    Any: new graphql_1.GraphQLScalarType({
        name: 'Any',
        description: 'Wildcard Anything! Here be dragons',
        serialize: function (value) {
            return JSON.stringify(value);
        },
        parseValue: function (input) { return JSON.parse(input); },
        parseLiteral: parseAnyAst
    }),
};
function buildStandaloneModel(mockServer) {
    var _this = this;
    return __assign({ Query: {
            mockedEndpoints: function () {
                return Promise.all(mockServer.mockedEndpoints.map(buildMockedEndpointData));
            },
            mockedEndpoint: function (__, _a) {
                var id = _a.id;
                var endpoint = _.find(mockServer.mockedEndpoints, function (endpoint) {
                    return endpoint.id === id;
                });
                if (!endpoint)
                    return null;
                return buildMockedEndpointData(endpoint);
            }
        }, Mutation: {
            addRule: function (__, _a) {
                var input = _a.input;
                return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, mockServer.addRule(input)];
                    });
                });
            },
            reset: function () {
                mockServer.reset();
                return true;
            },
            stop: function () {
                throw new Error('...stop?');
            }
        } }, ScalarResolvers);
}
exports.buildStandaloneModel = buildStandaloneModel;
