"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var completion_checkers_1 = require("./completion-checkers");
var matchers_1 = require("./matchers");
var handlers_1 = require("./handlers");
/**
 * Fluently builds mock rule data, passing it to the initial
 * callback once it's built & complete, and returning the (eventually)
 * defined endpoint to the consuming code once it's been registered
 */
var PartialMockRule = /** @class */ (function () {
    function PartialMockRule(method, path, addRule) {
        this.addRule = addRule;
        this.matchers = [new matchers_1.SimpleMatcherData(method, path)];
    }
    PartialMockRule.prototype.withHeaders = function (headers) {
        this.matchers.push(new matchers_1.HeaderMatcherData(headers));
        return this;
    };
    PartialMockRule.prototype.withForm = function (formData) {
        this.matchers.push(new matchers_1.FormDataMatcherData(formData));
        return this;
    };
    PartialMockRule.prototype.always = function () {
        this.isComplete = new completion_checkers_1.AlwaysData();
        return this;
    };
    PartialMockRule.prototype.once = function () {
        this.isComplete = new completion_checkers_1.OnceData();
        return this;
    };
    PartialMockRule.prototype.twice = function () {
        this.isComplete = new completion_checkers_1.TwiceData();
        return this;
    };
    PartialMockRule.prototype.thrice = function () {
        this.isComplete = new completion_checkers_1.ThriceData();
        return this;
    };
    PartialMockRule.prototype.times = function (n) {
        this.isComplete = new completion_checkers_1.TimesData(n);
        return this;
    };
    PartialMockRule.prototype.thenReply = function (status, data) {
        var rule = {
            matchers: this.matchers,
            completionChecker: this.isComplete,
            handler: new handlers_1.SimpleHandlerData(status, data)
        };
        return this.addRule(rule);
    };
    return PartialMockRule;
}());
exports.default = PartialMockRule;
