"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var types_1 = require("../types");
var normalize_url_1 = require("../util/normalize-url");
var SimpleMatcherData = /** @class */ (function () {
    function SimpleMatcherData(method, path) {
        this.method = method;
        this.path = path;
        this.type = 'simple';
    }
    return SimpleMatcherData;
}());
exports.SimpleMatcherData = SimpleMatcherData;
var HeaderMatcherData = /** @class */ (function () {
    function HeaderMatcherData(headers) {
        this.headers = headers;
        this.type = 'header';
    }
    return HeaderMatcherData;
}());
exports.HeaderMatcherData = HeaderMatcherData;
var FormDataMatcherData = /** @class */ (function () {
    function FormDataMatcherData(formData) {
        this.formData = formData;
        this.type = 'form-data';
    }
    return FormDataMatcherData;
}());
exports.FormDataMatcherData = FormDataMatcherData;
function buildMatchers(matcherPartData) {
    var matchers = matcherPartData.map(buildMatcher);
    var matchRequest = function matchRequest(req) {
        return _.every(matchers, function (m) { return m(req); });
    };
    matchRequest.explain = function () {
        var _this = this;
        if (matchers.length === 1)
            return matchers[0].explain.apply(this);
        // Oxford comma separate our matcher explanations
        return matchers.slice(0, -1)
            .map(function (m) { return m.explain.apply(_this); })
            .join(', ') + ', and ' + matchers.slice(-1)[0].explain.apply(this);
    };
    return matchRequest;
}
exports.buildMatchers = buildMatchers;
function buildMatcher(matcherPartData) {
    // Neither of these casts should really be required imo, seem like TS bugs
    var type = matcherPartData.type;
    var builder = matcherBuilders[type];
    return builder(matcherPartData);
}
exports.buildMatcher = buildMatcher;
var matcherBuilders = {
    simple: function (data) {
        var methodName = types_1.Method[data.method];
        var url = normalize_url_1.default(data.path);
        var matcher = (function (request) {
            return request.method === methodName && normalize_url_1.default(request.url) === url;
        });
        matcher.explain = function () { return "making " + methodName + "s for " + data.path; };
        return matcher;
    },
    header: function (data) {
        var lowerCasedHeaders = _.mapKeys(data.headers, function (value, key) { return key.toLowerCase(); });
        var matcher = (function (request) {
            return _.isMatch(request.headers, lowerCasedHeaders);
        });
        matcher.explain = function () { return "with headers including " + JSON.stringify(data.headers); };
        return matcher;
    },
    'form-data': function (data) {
        var matcher = (function (request) {
            return request.headers["content-type"] &&
                request.headers["content-type"].indexOf("application/x-www-form-urlencoded") !== -1 &&
                _.isMatch(request.body, data.formData);
        });
        matcher.explain = function () { return "with form data including " + JSON.stringify(data.formData); };
        return matcher;
    }
};
function combineMatchers(matcherA, matcherB) {
    var matcher = (function (request) { return matcherA(request) && matcherB(request); });
    matcher.explain = function () {
        return matcherA.explain.apply(this) + " and " + matcherB.explain.apply(this);
    };
    return matcher;
}
;
