"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var TypedError = require("typed-error");
var getFetch = require("fetch-ponyfill");
var fetch = getFetch().fetch;
var types_1 = require("../types");
var partial_mock_rule_1 = require("../rules/partial-mock-rule");
var http_server_mock_standalone_1 = require("../standalone/http-server-mock-standalone");
var mock_rule_1 = require("../rules/mock-rule");
var mocked_endpoint_client_1 = require("./mocked-endpoint-client");
var ConnectionError = /** @class */ (function (_super) {
    __extends(ConnectionError, _super);
    function ConnectionError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ConnectionError;
}(TypedError));
exports.ConnectionError = ConnectionError;
var RequestError = /** @class */ (function (_super) {
    __extends(RequestError, _super);
    function RequestError(message, response) {
        var _this = _super.call(this, message) || this;
        _this.response = response;
        return _this;
    }
    return RequestError;
}(TypedError));
exports.RequestError = RequestError;
var GraphQLError = /** @class */ (function (_super) {
    __extends(GraphQLError, _super);
    function GraphQLError(error, errors) {
        var _this = _super.call(this, "GraphQL request failed, with errors:\n" + errors.map(function (e) { return e.message; }).join('\n'), error.response) || this;
        _this.errors = errors;
        return _this;
    }
    return GraphQLError;
}(RequestError));
exports.GraphQLError = GraphQLError;
var HttpServerMockClient = /** @class */ (function () {
    function HttpServerMockClient() {
        var _this = this;
        this.standaloneServerUrl = "http://localhost:" + http_server_mock_standalone_1.DEFAULT_PORT;
        this.reset = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.queryMockServer("mutation Reset {\n                    reset\n            }")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        }); };
        this.addRule = function (rule) { return __awaiter(_this, void 0, void 0, function () {
            var ruleId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.queryMockServer("mutation AddRule($newRule: MockRule!) {\n                    addRule(input: $newRule) {\n                        id\n                    }\n            }", {
                            newRule: mock_rule_1.serializeRuleData(rule)
                        })];
                    case 1:
                        ruleId = (_a.sent()).data.addRule.id;
                        return [2 /*return*/, new mocked_endpoint_client_1.MockedEndpointClient(ruleId, this.getEndpointData(ruleId))];
                }
            });
        }); };
        this.getEndpointData = function (ruleId) { return function () { return __awaiter(_this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.queryMockServer("query GetEndpointData($id: ID!) {\n                    mockedEndpoint(id: $id) {\n                        seenRequests {\n                            protocol,\n                            method,\n                            url,\n                            path,\n                            hostname,\n                            headers,\n                            body\n                        }\n                    }\n            }", {
                            id: ruleId
                        })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.mockedEndpoint];
                }
            });
        }); }; };
    }
    HttpServerMockClient.prototype.requestFromStandalone = function (path, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response, e_1, body, jsonBody;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "" + this.standaloneServerUrl + path;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fetch(url, options)];
                    case 2:
                        response = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        if (e_1.code === 'ECONNREFUSED') {
                            throw new ConnectionError("Failed to connect to standalone server at " + this.standaloneServerUrl);
                        }
                        else
                            throw e_1;
                        return [3 /*break*/, 4];
                    case 4:
                        if (!(response.status >= 400)) return [3 /*break*/, 6];
                        return [4 /*yield*/, response.text()];
                    case 5:
                        body = _a.sent();
                        jsonBody = null;
                        try {
                            jsonBody = JSON.parse(body);
                        }
                        catch (e) { }
                        if (jsonBody && jsonBody.error) {
                            throw new RequestError(jsonBody.error, response);
                        }
                        else {
                            throw new RequestError("Request to " + url + " failed, with status " + response.status + " and response body: " + body, response);
                        }
                        return [3 /*break*/, 7];
                    case 6: return [2 /*return*/, response.json()];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    HttpServerMockClient.prototype.requestFromMockServer = function (path, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.mockServerConfig)
                            throw new Error('Not connected to mock server');
                        url = this.standaloneServerUrl + "/server/" + this.mockServerConfig.port + path;
                        return [4 /*yield*/, fetch(url, options)];
                    case 1:
                        response = _a.sent();
                        if (response.status >= 400) {
                            throw new RequestError("Request to " + url + " failed, with status " + response.status, response);
                        }
                        else {
                            return [2 /*return*/, response.json()];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    HttpServerMockClient.prototype.queryMockServer = function (query, variables) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2, graphQLErrors;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 4]);
                        return [4 /*yield*/, this.requestFromMockServer('/', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ query: query, variables: variables })
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_2 = _a.sent();
                        return [4 /*yield*/, e_2.response.json()];
                    case 3:
                        graphQLErrors = (_a.sent()).errors;
                        throw new GraphQLError(e_2, graphQLErrors);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    HttpServerMockClient.prototype.start = function (port) {
        return __awaiter(this, void 0, void 0, function () {
            var path, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.mockServerConfig)
                            throw new Error('Server is already started');
                        path = port ? "/start?port=" + port : '/start';
                        _a = this;
                        return [4 /*yield*/, this.requestFromStandalone(path, {
                                method: 'POST'
                            })];
                    case 1:
                        _a.mockServerConfig = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    HttpServerMockClient.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.mockServerConfig)
                            return [2 /*return*/];
                        return [4 /*yield*/, this.requestFromMockServer('/stop', {
                                method: 'POST'
                            })];
                    case 1:
                        _a.sent();
                        this.mockServerConfig = undefined;
                        return [2 /*return*/];
                }
            });
        });
    };
    HttpServerMockClient.prototype.enableDebug = function () {
        throw new Error("Client-side debug info not implemented.");
    };
    Object.defineProperty(HttpServerMockClient.prototype, "url", {
        get: function () {
            if (!this.mockServerConfig)
                return null;
            return this.mockServerConfig.mockRoot;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpServerMockClient.prototype, "port", {
        get: function () {
            if (!this.mockServerConfig)
                return null;
            return this.mockServerConfig.port;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpServerMockClient.prototype, "proxyEnv", {
        get: function () {
            if (!this.url)
                return null;
            return {
                HTTP_PROXY: this.url,
                HTTPS_PROXY: this.url
            };
        },
        enumerable: true,
        configurable: true
    });
    HttpServerMockClient.prototype.urlFor = function (path) {
        return this.url + path;
    };
    HttpServerMockClient.prototype.get = function (url) {
        return new partial_mock_rule_1.default(types_1.Method.GET, url, this.addRule);
    };
    HttpServerMockClient.prototype.post = function (url) {
        return new partial_mock_rule_1.default(types_1.Method.POST, url, this.addRule);
    };
    HttpServerMockClient.prototype.put = function (url) {
        return new partial_mock_rule_1.default(types_1.Method.PUT, url, this.addRule);
    };
    return HttpServerMockClient;
}());
exports.default = HttpServerMockClient;
