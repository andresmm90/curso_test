"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var portfinder = require("portfinder");
var express = require("express");
var bodyParser = require("body-parser");
var types_1 = require("../types");
var partial_mock_rule_1 = require("../rules/partial-mock-rule");
var destroyable_server_1 = require("../util/destroyable-server");
var mock_rule_1 = require("../rules/mock-rule");
var mocked_endpoint_1 = require("./mocked-endpoint");
// Provides all the external API, uses that to build and manage the rules list, and interrogate our recorded requests
var HttpServerMockServer = /** @class */ (function () {
    function HttpServerMockServer() {
        var _this = this;
        this.rules = [];
        this.debug = false;
        this.addRule = function (ruleData) {
            var rule = new mock_rule_1.MockRule(ruleData);
            _this.rules.push(rule);
            return Promise.resolve(new mocked_endpoint_1.MockedEndpoint(rule));
        };
        this.isComplete = function (rule, matchingRules) {
            if (rule.isComplete) {
                return rule.isComplete();
            }
            else if (matchingRules[matchingRules.length - 1] === rule) {
                return false;
            }
            else {
                return rule.requests.length !== 0;
            }
        };
        this.app = express();
        this.app.use(bodyParser.json());
        this.app.use(bodyParser.urlencoded({ extended: true }));
        this.app.use(this.handleRequest.bind(this));
    }
    HttpServerMockServer.prototype.start = function (port) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = port;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                portfinder.getPort(function (err, port) {
                                    if (err)
                                        reject(err);
                                    else
                                        resolve(port);
                                });
                            })];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        port = (_a);
                        if (this.debug)
                            console.log("Starting mock server on port " + port);
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                _this.server = destroyable_server_1.default(_this.app.listen(port, resolve));
                            })];
                }
            });
        });
    };
    HttpServerMockServer.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.debug)
                            console.log("Stopping server at " + this.url);
                        return [4 /*yield*/, this.server.destroy()];
                    case 1:
                        _a.sent();
                        this.reset();
                        return [2 /*return*/];
                }
            });
        });
    };
    HttpServerMockServer.prototype.enableDebug = function () {
        this.debug = true;
    };
    HttpServerMockServer.prototype.reset = function () {
        this.rules = [];
        this.debug = false;
    };
    Object.defineProperty(HttpServerMockServer.prototype, "mockedEndpoints", {
        get: function () {
            return this.rules.map(function (rule) { return new mocked_endpoint_1.MockedEndpoint(rule); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpServerMockServer.prototype, "url", {
        get: function () {
            if (!this.server)
                return null;
            return "http://localhost:" + this.server.address().port;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpServerMockServer.prototype, "port", {
        get: function () {
            if (!this.server)
                return null;
            return this.server.address().port;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpServerMockServer.prototype, "proxyEnv", {
        get: function () {
            if (!this.url)
                return null;
            return {
                HTTP_PROXY: this.url,
                HTTPS_PROXY: this.url
            };
        },
        enumerable: true,
        configurable: true
    });
    HttpServerMockServer.prototype.urlFor = function (path) {
        return this.url + path;
    };
    HttpServerMockServer.prototype.get = function (url) {
        return new partial_mock_rule_1.default(types_1.Method.GET, url, this.addRule);
    };
    HttpServerMockServer.prototype.post = function (url) {
        return new partial_mock_rule_1.default(types_1.Method.POST, url, this.addRule);
    };
    HttpServerMockServer.prototype.put = function (url) {
        return new partial_mock_rule_1.default(types_1.Method.PUT, url, this.addRule);
    };
    HttpServerMockServer.prototype.handleRequest = function (request, response) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var matchingRules_1, nextRule, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        matchingRules_1 = this.rules.filter(function (r) { return r.matches(request); });
                        nextRule = matchingRules_1.filter(function (r) { return !_this.isComplete(r, matchingRules_1); })[0];
                        if (!nextRule) return [3 /*break*/, 2];
                        if (this.debug)
                            console.log("Request matched rule: " + nextRule.explain());
                        return [4 /*yield*/, nextRule.handleRequest(request, response)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        if (this.debug)
                            console.warn("Unmatched request received: " + explainRequest(request));
                        response.writeHead(503, "Request for unmocked endpoint");
                        response.write("No rules were found matching this request.\n");
                        response.write("This request was: " + explainRequest(request) + "\n\n");
                        response.write("The configured rules are:\n");
                        this.rules.forEach(function (rule) { return response.write(rule.explain() + "\n"); });
                        response.end();
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        console.error("Failed to handle request", e_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return HttpServerMockServer;
}());
exports.default = HttpServerMockServer;
function explainRequest(request) {
    var msg = request.method + " request to " + request.url;
    if (request.body && request.body.length > 0) {
        msg += " with body `" + request.body + "`";
    }
    return msg;
}
